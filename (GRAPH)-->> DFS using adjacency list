
package graphpractice;
import java.util.ArrayList;
import java.util.Stack;
import java.util.List;


class Graph{
    List<List<Integer>>graph;
    boolean visited[];
    
    Graph(int nodes){
        graph = new ArrayList<>();
        visited = new boolean[nodes];
        
        for(int i = 0;i<nodes;i++){
            graph.add(i,new ArrayList<>());
        }
        
    }
    
    public void addEdges(int a, int b){
        graph.get(a).add(b);
        graph.get(b).add(a);
    }
    public void dfs(int start){
        Stack<Integer> stack = new Stack();
        
        stack.push(start);
        visited[start] = true;
        
        while(!stack.isEmpty()){
            Integer node = stack.pop();
            System.out.print(node+" ");
            
            List<Integer> neighbourlist  = graph.get(node);
            
            for(Integer neighbour : neighbourlist){
                if(!visited[neighbour]){
                    stack.push(neighbour);
                    visited[neighbour] = true;
                }
            }
        }
        
                
    }
}
        


public class Graphpractice {

    public static void main(String[] args) {
         int nodes = 7;
        Graph a = new Graph(nodes);
        
        a.addEdges(0,1);
        a.addEdges(0,2);
        a.addEdges(1,3);
        a.addEdges(2,4);
        a.addEdges(4,5);
        a.addEdges(4,6);
        a.addEdges(3,5);
                    
        a.dfs(0);
        
       
        
    }
    
}
